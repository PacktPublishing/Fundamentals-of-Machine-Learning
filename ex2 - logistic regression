{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ex2 - logistic regression","provenance":[{"file_id":"https://github.com/FreeOfConfines/ExampleNNWithKerasAndTensorflow/blob/master/Logistic_Regression.ipynb","timestamp":1644370803040}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"K1rjF8zTWlgx"},"source":["## Getting Started\n","\n","In this article on Logistic Regression, we will explore the following:\n","1. Mathematics behind logistic regression algorithm to two-class and multi-class classification problem\n","2. Implement logistic regression with TF/Keras library and apply it on Fashion MNIST database. In the implementation section, we will explore two ways to implement this algorithm.\n","3. Finally, we will summarize results from the implementations.\n","\n","Mathematical description should be easy to follow and should help understand fundamentals of logistic regression. If you are not keen on the math, then you may proceed directly to the Implementation and Conclusion sections."]},{"cell_type":"markdown","metadata":{"id":"SBa4DcYD7sPp"},"source":["## Classification Problems and Logistic Regression\n","\n"]},{"cell_type":"markdown","metadata":{"id":"PF9YYOvX8JvM"},"source":["Classification problems involve categorizing or assigning an input to one of the many discrete classes or labels. For instance, classifying an input image as a picture of an article of clothing, like Pant, Skirt, Jacket etc. Classification problems are different from typical regression problems in that their output classes are discrete, i.e., not continuous. In other words, Label Pant, Label Skirt, Label Jacket etc. are discrete classes. Typically, we associate a numerical ID with each class.\n","\n","Logistic regression is a simple algorithm applied on Classification problems. Given an observation, logistic regression classifier will compute a **probability** metric and will label the observation to a class with the highest probability.\n","\n","Later we will work with Fashion MNIST database which is a collection of images. Therefore, it is fair to assume that each observation is an image. Let us formalize the approach.\n"," "]},{"cell_type":"markdown","metadata":{"id":"-ZDnTi0I8M99"},"source":["## Two-Class Classification Problem"]},{"cell_type":"markdown","metadata":{"id":"y_71RWC4J1i-"},"source":["In a Two-Class Classification problem, there are two output classes, say Class 0 and Class 1. Given an observation, logistic regression will label the observation as Class 1 if the metric is greater than 0.5 else label it as Class 0.\n","\n","We are given a group of images and their correct class labels; this group forms the **training data**. Let $x_i$ be the $i$-th image of the tranining set and $y_i$ be the class label of the $i$-th image. Each image is a $p \\times p$ matrix, which means $x_i$ is a flattened vector with $p^2$ entries. Class label of $i$-th image takes one of two values, i.e., $0$ or $1$. \n","\n","The **probability** metric that an $i$-th image belongs to Class 1 is defined as:\n","\\begin{equation}\n","\\mathbb{P}(\\hat{y_i}=1 | x_i, \\beta) = \\frac{e^{\\beta^{T}x_i}}{1+ e^{\\beta^{T}x_i}}=p_i\n","\\end{equation}\n","Since there are only two classes, the probability metric that the image belongs to Class 0 is:\n","\\begin{equation}\n","\\mathbb{P}(\\hat{y_i}=0 | x_i, \\beta) = 1-\\mathbb{P}(\\hat{y_i}=1 | x_i, \\beta) = 1- p_i = q_i\n","\\end{equation}\n","\n","Let us understand the above formulation a little better:\n","\n","1. The metric $\\mathbb{P}(\\hat{y_i}=1 | x_i, \\beta)$ **[sigmoid function](https://en.wikipedia.org/wiki/Sigmoid_function)** which takes on values between 0 and 1. Note that  $\\mathbb{P}(\\hat{y_i}=1 | x_i, \\beta)$ and $\\mathbb{P}(\\hat{y_i}=0 | x_i, \\beta)$ adds up to 1.\n","2.$\\beta$ is a vector with $p^2$ entries, same as any $x_i$. $\\beta$ is the vector we hope to **learn** by training our network on the set of input images and their associated ground-truth labels.\n","3. Keen readers would have noticed we have one parameter vector $\\beta$ for two classes. For a problem with $k$ classes, $k-1$ $\\beta$(s) are sufficient. This makes sense because the probability of belonging to the $k$-th class is simply one minus the sum of probabilities of belonging to all other classes.\n","\n","Let us understand decision boundary of the classifier:\n","\n","As mentioned earlier, an image is labeled as Class 1 if the probability metric is 0.5 or greater. In a spatial sense, classifier (after training) would have arrived at a $\\beta$ that will put all images belonging to Class 1 on one side of the $p=0.5$ boundary and the rest on the other side. Therefore, $p=0.5$ defines a **decision** boundary.\n","\n","\\begin{equation}\n","\\mathbb{P}(\\hat{y_i}=1 | x_i, \\beta) = 0.5 \\\\\n","\\implies \\frac{e^{\\beta^{T}x_i}}{1+ e^{\\beta^{T}x_i}} =0.5 \\\\\n","\\implies e^{\\beta^{T}x_i} = 1 \\\\\n","\\implies \\beta^{T}x_i =0\n","\\end{equation}\n"," \n"," The equation $\\beta^{T}x_i =0$ is a hyperplane (in two dimensional space, it is a simple line) that divides the two classes of images; images on one side of this hyperplane belong to Class-0 and images on the other size of this hyperplane belong to Class-1.\n"," \n"," In other words, logistic regression tries to create **linear** boundaries in a $p^2$ dimensional space. We will revisit decision boundary later in the discussion.\n"," \n"," \n","### Estimate $\\beta$ coefficients (Training Phase)\n","\n","In training phase, we use $n$ images and their corresponding class labels to train or estimate *good* $\\beta$ coefficients. Since we are working with probability metric, it is natural to use the **likelihood** objective function ($L(\\beta)$):\n","\\begin{equation}\n","L(\\beta) = \\prod_{k=1}^{n} \\mathbb{P}(Y_i = y_i | x_i, \\beta)\n","\\end{equation}\n","\n","Let us understand the above formulation a little better:\n","1. There are $n$ terms within the product above and each of the term corresponds to an image in the training set.\n","2. For each image in the training set, we know the ground truth or the class label-note we are given that information. If $i$-th image belongs to Class 1 (as per ground truth), then use $p$ for the $i$-th entry in the product above. The objective function thus formed is the **likelihood** objective function.\n","3. Intuitively, we would want to estimate $\\beta$ that maximizes the likelihood objective function.\n","\n","An iterative optimization algorithm may be used to achieve this maximization, for instance, **weighted least-squares regression** is one such algorithm.\n","\n","### Implementation Details\n","\n","We will continue to explore the $L(\\beta)$ formulation for the Two-Class problem further to familiarize with some nifty implementational details. If you have read other materials on logistic regression, you might have come across **cross entropy with logits**. I will try to explain how this fits into logistic regression:\n","\n","In a Two-Class problem, $y_i$(s) take on value of $1$ or $0$, and so we can re-write the above equation:\n","\n","\\begin{equation}\n","L(\\beta) = \\prod_{i=1}^{n} \\mathbb{P}(Y_i = 0 | x_i, \\beta)^{1-y_i} \\mathbb{P}(Y_i = 1 | x_i, \\beta)^{y_i} \\\\\n","= \\prod_{i=1}^{n} q_i^{1-y_i}p_i^{y_i}\n","\\end{equation}\n","\n","Clever part of the rewrite is that $i$-th term of the product is $q_i$ if $y_i=0$ else it is $p_i$. For convenience, we will work with **logarithm** of the cost function, often referred to as **log likelihood** objective function:\n","\\begin{equation}\n","l(\\beta) = \\log(L(\\beta)) = \\sum_{i=1}^{n}(1-y_i)\\log(q_i) + y_i \\log(p_i)\\\\\n","= \\sum_{i=1}^{n} \\log(q_i) + y_i \\log(\\frac{p_i}{q_i})\n","\\end{equation}\n","\n","Let us understand the formulation a little better:\n","1. The term $\\log(\\frac{p_i}{q_i})$ is often referred to as **logit** of $p_i$. \n","2.  The $i$-term in the summation is referred to as **cross-entropy with logits**, cross-entropy with logits refer to how the appropriate $p$ or $q$ is picked based on class label of the $i$-th term.\n","\n","### Discussion\n","\n","We had shown that logistic regression creates linear boundaries to separate (in this case) the two classes. But not all classification problems will be so well-behaved, i.e., linear boundaries may not be sufficient to separate the two classes. \n","\n","Imagine a classification problem where Class-0 is every example within a unit circle (or sphere) and Class-1 is every example outside a unit circle (or sphere). Naturally, classification using linear boundaries **will not work** for this example. When faced with such classification problems, transforming input elements $x_i$ may help transform complex decision boundaries to those classifiable with linear boundaries. By the way, there is no guarantee we can find a transformation to achieve this."]},{"cell_type":"markdown","metadata":{"id":"xyNLnBEG8Vxv"},"source":["## Multi-Class Classification Problem"]},{"cell_type":"markdown","metadata":{"id":"ToCtdKi-qu-O"},"source":["In a Multi-Class Classification problem, there are $K$ possible class labels and the formalization is an extension of the Two-Class Classification problem. \n","\n","The **probability** metric that an $i$-th image belongs to Class-$k$, where $0 \\leq k < K-1$, is defined as:\n","\\begin{equation}\n","\\mathbb{P}(\\hat{y_i}=k | x_i, \\beta) = \\frac{e^{\\beta_{k}^{T}x_i}}{1+ e^{\\beta_{k}^{T}x_i}}=p_{i,k}\n","\\end{equation}\n","\n","Let us understand the above formulation a little better:\n","1. There are $K-1$ $\\beta$(s), i.e., one each for $K-1$ of the $K$ classes.\n","2. Note that $k$ goes from $0$ to $K-2$ and not $K-1$. This is so because $\\mathbb{P}(\\hat{y_i}=K-1 | x_i, \\beta) = 1 - (p_0+p_1+...+p_{K-2})$.\n","\n","Skipping some of the steps detailed in the Two-Class classification problem, let us review the forumulation for $l(\\beta)$:\n","\\begin{equation}\n","l(\\beta) = \\log(L(\\beta)) = \\sum_{i=1}^{n}\n","[\n","\\begin{array}{ccccc}\n","\\log(p_{i,0}), \\log(p_{i,1}), \\log(p_{i,2}), ... , \\log(p_{i,K-1})\n","\\end{array}\n","]\n","\\left[\n","\\begin{array}{c}\n","0 \\\\\n","0 \\\\\n",". \\\\\n","1 \\\\\n",". \\\\\n","0\n","\\end{array}\n","\\right]\n","\\end{equation}\n","\n","Let us understand the above formulation a little better:\n","1. The summation is over all images in the training set, in this case $n$ such images.\n","2. For an $i$-th image, i.e., a term within the summation, a dot product is computed between probability vector and **one-hot** vector.\n","3. The **one-hot** vector for the $i$-th image is $1$ only at $k$-th entry, i.e., $i$-th image belongs to Class-$k$.\n","4. The probability vector is the vector of probabilities computed for each class based on the probability formulation above.\n","5. The dot product simply picks one element from the probability vector. Same as above, this is referred to as **cross-etropy with logits**.\n","\n","Finally, all $\\beta_{k}$(s) are estimated as part of the training phase by optimizing, i.e., minimizing or maximizing, an objective function.\n"]},{"cell_type":"markdown","metadata":{"id":"xMXa4U6c1x0x"},"source":["## Logistic Regression with TF/Keras Library\n","\n","In this section, we will implement logistic regression and apply on Fashion MNIST database. The database contains images of articles of clothing and the task is to classify these images as one of a select number of labels. Training set contains $60000$ images and Test set contains $10000$ images. There are a total of $10$ class labels. Each image is a $28 \\times 28$ matrix of pixel values."]},{"cell_type":"code","metadata":{"id":"MK5vxrwqWuN3","executionInfo":{"status":"ok","timestamp":1649414115125,"user_tz":240,"elapsed":5007,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"TeoZXFyY2EdY","outputId":"e0704f15-3141-4f8d-a74a-47c2760458cb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649414116169,"user_tz":240,"elapsed":1049,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["# Download Fashion MNIST data\n","from tensorflow import keras\n","fashion_mnist = keras.datasets.fashion_mnist\n","(trImages, trLabels), (tImages, tLabels) = fashion_mnist.load_data()"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","32768/29515 [=================================] - 0s 0us/step\n","40960/29515 [=========================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","26427392/26421880 [==============================] - 0s 0us/step\n","26435584/26421880 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","16384/5148 [===============================================================================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","4423680/4422102 [==============================] - 0s 0us/step\n","4431872/4422102 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","metadata":{"id":"rBPqXMelSxU7","colab":{"base_uri":"https://localhost:8080/"},"outputId":"192c225a-eeee-4738-9658-6831e9e2d45b","executionInfo":{"status":"ok","timestamp":1649414116169,"user_tz":240,"elapsed":3,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["print(np.shape(trImages))\n","print(np.shape(tImages))\n","print(np.max(trImages[0]))\n","print(np.min(trImages[0]))"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(60000, 28, 28)\n","(10000, 28, 28)\n","255\n","0\n"]}]},{"cell_type":"markdown","metadata":{"id":"jzcv_wRzT-Ap"},"source":["### Single-Layer Implementation\n","\n","Single-layer implementation of logistic regression follows the discussion above. There is an input layer where each image is flattened into a vector of $28 \\times 28 = 784$ elements and fed into a **Softmax** layer. Output of softmax layer are probabilities of the image belonging to one of the possible $10$ class labels. \n","\n","One may wonder why we use **Softmax** instead of **Sigmoid** formulation used in the formalization above. We will revisit this later in the discussion."]},{"cell_type":"code","metadata":{"id":"NyioMvtnBNY7","executionInfo":{"status":"ok","timestamp":1649414116169,"user_tz":240,"elapsed":2,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["# Training Parameters\n","batchSize = 128\n","nEpochs = 50"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"luWf-06-9tFC"},"source":["In the code snippet below, we do the following:\n","\n","\n","1.   Defining a Sequential network model using Keras library\n","2.   Input images are flattened in the input layer and fed to subsequent layer\n","3.   Layer1 has 10 units whose activation function is **Softmax**\n","4.   Loss function is Sparse_Categorical_CrossEntropy\n","5.   Adam optimizer is used to minimize the above loss function during the training phase\n","\n","A block diagram of the network shows dimensions of the various layers."]},{"cell_type":"code","metadata":{"id":"jKkG_yPG2eWV","outputId":"df504358-5928-4f99-81bd-092dfe0a683e","colab":{"base_uri":"https://localhost:8080/","height":312},"executionInfo":{"status":"ok","timestamp":1649414116736,"user_tz":240,"elapsed":568,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["# Building a feed-forward network\n","model = tf.keras.Sequential() # empty model\n","\n","# Layer0 simply flattens image input\n","layer0 = tf.keras.layers.Flatten(input_shape=np.shape(trImages[0]), name='Images')\n","model.add(layer0)\n","\n","# Layer1 is the output layer\n","numUnits_L1 = 10\n","layer1 = tf.keras.layers.Dense(units=numUnits_L1, activation=tf.nn.softmax, use_bias=True, name='Logistic')\n","model.add(layer1)\n","\n","# Compile model\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) #'sparse_categorical_crossentropy'\n","\n","# Plot Logistic Regression Network\n","tf.keras.utils.plot_model(model,show_shapes=True,show_layer_names=True)"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Image object>"],"image/png":"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\n"},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"XMOrroKU72oU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"60e27a86-ea4c-42f5-f37d-e83ac2fc5fa7","executionInfo":{"status":"ok","timestamp":1649414174353,"user_tz":240,"elapsed":57621,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["# Normalizing input (this step doesn't seem to be critical)\n","trImages = trImages/255.0\n","tImages = tImages/255.0\n","\n","# Train the model\n","trHistory = model.fit(x=trImages, y=trLabels, batch_size=batchSize, epochs=nEpochs,\n","                      shuffle=False, validation_split=0.0)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","469/469 [==============================] - 2s 2ms/step - loss: 0.7312 - accuracy: 0.7582\n","Epoch 2/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.5138 - accuracy: 0.8277\n","Epoch 3/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.4727 - accuracy: 0.8418\n","Epoch 4/50\n","469/469 [==============================] - 1s 3ms/step - loss: 0.4511 - accuracy: 0.8476\n","Epoch 5/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.4373 - accuracy: 0.8516\n","Epoch 6/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.4274 - accuracy: 0.8548\n","Epoch 7/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.4199 - accuracy: 0.8571\n","Epoch 8/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.4140 - accuracy: 0.8585\n","Epoch 9/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.4091 - accuracy: 0.8602\n","Epoch 10/50\n","469/469 [==============================] - 1s 3ms/step - loss: 0.4050 - accuracy: 0.8614\n","Epoch 11/50\n","469/469 [==============================] - 1s 3ms/step - loss: 0.4015 - accuracy: 0.8623\n","Epoch 12/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3984 - accuracy: 0.8636\n","Epoch 13/50\n","469/469 [==============================] - 1s 3ms/step - loss: 0.3957 - accuracy: 0.8641\n","Epoch 14/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3933 - accuracy: 0.8648\n","Epoch 15/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3911 - accuracy: 0.8653\n","Epoch 16/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3891 - accuracy: 0.8658\n","Epoch 17/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3874 - accuracy: 0.8663\n","Epoch 18/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3857 - accuracy: 0.8671\n","Epoch 19/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3842 - accuracy: 0.8675\n","Epoch 20/50\n","469/469 [==============================] - 1s 3ms/step - loss: 0.3828 - accuracy: 0.8680\n","Epoch 21/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3815 - accuracy: 0.8684\n","Epoch 22/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3803 - accuracy: 0.8687\n","Epoch 23/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3791 - accuracy: 0.8689\n","Epoch 24/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3781 - accuracy: 0.8690\n","Epoch 25/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3771 - accuracy: 0.8692\n","Epoch 26/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3761 - accuracy: 0.8693\n","Epoch 27/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3752 - accuracy: 0.8694\n","Epoch 28/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3743 - accuracy: 0.8695\n","Epoch 29/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3735 - accuracy: 0.8697\n","Epoch 30/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3727 - accuracy: 0.8699\n","Epoch 31/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3720 - accuracy: 0.8702\n","Epoch 32/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3713 - accuracy: 0.8703\n","Epoch 33/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3706 - accuracy: 0.8708\n","Epoch 34/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3700 - accuracy: 0.8709\n","Epoch 35/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3693 - accuracy: 0.8710\n","Epoch 36/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3687 - accuracy: 0.8710\n","Epoch 37/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3682 - accuracy: 0.8711\n","Epoch 38/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3676 - accuracy: 0.8714\n","Epoch 39/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3671 - accuracy: 0.8715\n","Epoch 40/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3665 - accuracy: 0.8717\n","Epoch 41/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3660 - accuracy: 0.8719\n","Epoch 42/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3655 - accuracy: 0.8721\n","Epoch 43/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3651 - accuracy: 0.8723\n","Epoch 44/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3646 - accuracy: 0.8724\n","Epoch 45/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3642 - accuracy: 0.8726\n","Epoch 46/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3637 - accuracy: 0.8728\n","Epoch 47/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3633 - accuracy: 0.8729\n","Epoch 48/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3629 - accuracy: 0.8729\n","Epoch 49/50\n","469/469 [==============================] - 1s 3ms/step - loss: 0.3625 - accuracy: 0.8731\n","Epoch 50/50\n","469/469 [==============================] - 1s 2ms/step - loss: 0.3621 - accuracy: 0.8731\n"]}]},{"cell_type":"code","metadata":{"id":"L5HYLbgj4tf3","outputId":"3d8d4228-28c4-424a-d7ab-47eb9ffd1221","colab":{"base_uri":"https://localhost:8080/","height":527},"executionInfo":{"status":"ok","timestamp":1649414174753,"user_tz":240,"elapsed":402,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["plt.figure(1)\n","plt.plot(trHistory.history['accuracy'], 'b-o')\n","#plt.plot(trHistory.history['loss'])\n","plt.grid(True)\n","# plt.xlabel('Epoch #')\n","plt.ylabel(\"Accuracy\")\n","\n","plt.figure(2)\n","plt.plot(trHistory.history['loss'],'r-s')\n","plt.grid(True)\n","plt.xlabel('Epoch #')\n","plt.ylabel(\"Loss\")\n","plt.show()"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"aA4r8rHs4x3g","outputId":"32ccd309-cfcb-4230-b5ad-9d16f01d3333","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649414175222,"user_tz":240,"elapsed":470,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["tPrediction = model.predict(tImages) # output is a matrix of probabilities where each row corresponds to an image in the Test Set\n","idCount = 0\n","nErrs = 0\n","for _ in tPrediction:\n","  predictedLabel = np.argmax(_)\n","  if predictedLabel != tLabels[idCount]:\n","     nErrs += 1\n","  idCount += 1\n","\n","errRate = nErrs / float(np.shape(tImages)[0])\n","print(\"Prediction Error = %f\" %errRate)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Prediction Error = 0.155200\n"]}]},{"cell_type":"markdown","metadata":{"id":"FRpyvddw5JM_"},"source":["### Multi-Layer Implementation\n","\n","In a multi-layer implementation of logistic regression, we process the input layer through additional ReLu layers prior to feeding it to a Logistic layer. In this implementation, pixels of input images are preprocessed prior to generating probabilities. \n","\n","In this example, we add two additional layers: Layer-1 has 128 units with ReLu activation and Layer-2 has 32 units with ReLu activation as well. The Logistic layer (or Layer-3), as before, has 10 units with Softmax activation.\n","\n","Such an implementation shows better classification performance."]},{"cell_type":"code","metadata":{"id":"_yFe7DRr6ghw","executionInfo":{"status":"ok","timestamp":1649414175222,"user_tz":240,"elapsed":1,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["# Training Parameters\n","batchSize = 128\n","nEpochs = 150"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"3mhEcWZR5R1A","outputId":"94cfa7d8-63bb-4375-f8b8-c23a8962cfd0","colab":{"base_uri":"https://localhost:8080/","height":533},"executionInfo":{"status":"ok","timestamp":1649414175456,"user_tz":240,"elapsed":235,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["# Building a feed-forward network\n","model = tf.keras.Sequential() # empty model\n","\n","# Layer0 simply flattens image input\n","layer0 = tf.keras.layers.Flatten(input_shape=np.shape(trImages[0]),name='Images')\n","model.add(layer0)\n","\n","# Layer1 is a dense layer\n","numUnits_L1 =128\n","layer1 = tf.keras.layers.Dense(units=numUnits_L1, activation=tf.nn.relu, use_bias=True,name='Dense-Relu1')\n","model.add(layer1)\n","\n","# Layer2 is a dense layer\n","numUnits_L2 =32\n","layer2 = tf.keras.layers.Dense(units=numUnits_L2, activation=tf.nn.relu, use_bias=True,name='Dense-Relu2')\n","model.add(layer2)\n","\n","# Layer3 is the output layer\n","numUnits_L3 = 10\n","layer3 = tf.keras.layers.Dense(units=numUnits_L3, activation=tf.nn.softmax, use_bias=True, name='Logistic')\n","model.add(layer3)\n","\n","# Compile model\n","model.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy']) #'sparse_categorical_crossentropy'\n","\n","# Plot Logistic Regression Network\n","tf.keras.utils.plot_model(model, show_shapes=True, show_layer_names=True)"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Image object>"],"image/png":"\n"},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"Np53mQip_hHh","colab":{"base_uri":"https://localhost:8080/"},"outputId":"524664f4-4bfa-4ab8-dc75-d54b05a4c09f","executionInfo":{"status":"ok","timestamp":1649414558075,"user_tz":240,"elapsed":382621,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["# Normalizing input (this step doesn't seem to be critical)\n","trImages = trImages / 255.0\n","tImages = tImages / 255.0\n","\n","# Train the model\n","trHistory = model.fit(x=trImages, y=trLabels, batch_size=batchSize, epochs=nEpochs,\n","                      shuffle=False, validation_split=0.0)"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/150\n","469/469 [==============================] - 3s 5ms/step - loss: 1.3093 - accuracy: 0.5610\n","Epoch 2/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.7065 - accuracy: 0.7443\n","Epoch 3/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.6098 - accuracy: 0.7768\n","Epoch 4/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.5667 - accuracy: 0.7944\n","Epoch 5/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.5375 - accuracy: 0.8070\n","Epoch 6/150\n","469/469 [==============================] - 3s 6ms/step - loss: 0.5152 - accuracy: 0.8161\n","Epoch 7/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.4968 - accuracy: 0.8232\n","Epoch 8/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.4809 - accuracy: 0.8283\n","Epoch 9/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.4673 - accuracy: 0.8339\n","Epoch 10/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.4556 - accuracy: 0.8382\n","Epoch 11/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.4454 - accuracy: 0.8419\n","Epoch 12/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.4365 - accuracy: 0.8451\n","Epoch 13/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.4285 - accuracy: 0.8484\n","Epoch 14/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.4216 - accuracy: 0.8507\n","Epoch 15/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.4152 - accuracy: 0.8526\n","Epoch 16/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.4094 - accuracy: 0.8544\n","Epoch 17/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.4040 - accuracy: 0.8561\n","Epoch 18/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3990 - accuracy: 0.8577\n","Epoch 19/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3942 - accuracy: 0.8591\n","Epoch 20/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3896 - accuracy: 0.8610\n","Epoch 21/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.3852 - accuracy: 0.8624\n","Epoch 22/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.3810 - accuracy: 0.8635\n","Epoch 23/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3770 - accuracy: 0.8650\n","Epoch 24/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3731 - accuracy: 0.8661\n","Epoch 25/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3694 - accuracy: 0.8677\n","Epoch 26/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3658 - accuracy: 0.8687\n","Epoch 27/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3623 - accuracy: 0.8700\n","Epoch 28/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.3588 - accuracy: 0.8709\n","Epoch 29/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.3554 - accuracy: 0.8725\n","Epoch 30/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.3520 - accuracy: 0.8734\n","Epoch 31/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3487 - accuracy: 0.8745\n","Epoch 32/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.3455 - accuracy: 0.8757\n","Epoch 33/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.3424 - accuracy: 0.8766\n","Epoch 34/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3395 - accuracy: 0.8775\n","Epoch 35/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.3366 - accuracy: 0.8783\n","Epoch 36/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3337 - accuracy: 0.8792\n","Epoch 37/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3310 - accuracy: 0.8802\n","Epoch 38/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3283 - accuracy: 0.8812\n","Epoch 39/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3257 - accuracy: 0.8820\n","Epoch 40/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3233 - accuracy: 0.8830\n","Epoch 41/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3208 - accuracy: 0.8838\n","Epoch 42/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3184 - accuracy: 0.8845\n","Epoch 43/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3161 - accuracy: 0.8856\n","Epoch 44/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3138 - accuracy: 0.8864\n","Epoch 45/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3116 - accuracy: 0.8868\n","Epoch 46/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3094 - accuracy: 0.8874\n","Epoch 47/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3073 - accuracy: 0.8883\n","Epoch 48/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3052 - accuracy: 0.8891\n","Epoch 49/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3032 - accuracy: 0.8900\n","Epoch 50/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.3013 - accuracy: 0.8907\n","Epoch 51/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2993 - accuracy: 0.8914\n","Epoch 52/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2975 - accuracy: 0.8924\n","Epoch 53/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2957 - accuracy: 0.8930\n","Epoch 54/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2939 - accuracy: 0.8936\n","Epoch 55/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2921 - accuracy: 0.8942\n","Epoch 56/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2903 - accuracy: 0.8949\n","Epoch 57/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2887 - accuracy: 0.8955\n","Epoch 58/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2870 - accuracy: 0.8960\n","Epoch 59/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2853 - accuracy: 0.8963\n","Epoch 60/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2836 - accuracy: 0.8972\n","Epoch 61/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2820 - accuracy: 0.8974\n","Epoch 62/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2804 - accuracy: 0.8981\n","Epoch 63/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2788 - accuracy: 0.8988\n","Epoch 64/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2773 - accuracy: 0.8994\n","Epoch 65/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2757 - accuracy: 0.8997\n","Epoch 66/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2742 - accuracy: 0.9002\n","Epoch 67/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2727 - accuracy: 0.9007\n","Epoch 68/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2713 - accuracy: 0.9012\n","Epoch 69/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2699 - accuracy: 0.9018\n","Epoch 70/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2684 - accuracy: 0.9021\n","Epoch 71/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2671 - accuracy: 0.9025\n","Epoch 72/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2657 - accuracy: 0.9030\n","Epoch 73/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2643 - accuracy: 0.9037\n","Epoch 74/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2629 - accuracy: 0.9040\n","Epoch 75/150\n","469/469 [==============================] - 2s 4ms/step - loss: 0.2616 - accuracy: 0.9046\n","Epoch 76/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2603 - accuracy: 0.9050\n","Epoch 77/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2590 - accuracy: 0.9054\n","Epoch 78/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2577 - accuracy: 0.9058\n","Epoch 79/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2565 - accuracy: 0.9065\n","Epoch 80/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2552 - accuracy: 0.9071\n","Epoch 81/150\n","469/469 [==============================] - 3s 6ms/step - loss: 0.2539 - accuracy: 0.9077\n","Epoch 82/150\n","469/469 [==============================] - 3s 6ms/step - loss: 0.2528 - accuracy: 0.9084\n","Epoch 83/150\n","469/469 [==============================] - 4s 8ms/step - loss: 0.2515 - accuracy: 0.9087\n","Epoch 84/150\n","469/469 [==============================] - 3s 7ms/step - loss: 0.2503 - accuracy: 0.9094\n","Epoch 85/150\n","469/469 [==============================] - 3s 7ms/step - loss: 0.2491 - accuracy: 0.9100\n","Epoch 86/150\n","469/469 [==============================] - 3s 6ms/step - loss: 0.2478 - accuracy: 0.9103\n","Epoch 87/150\n","469/469 [==============================] - 3s 7ms/step - loss: 0.2466 - accuracy: 0.9106\n","Epoch 88/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2454 - accuracy: 0.9110\n","Epoch 89/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2443 - accuracy: 0.9115\n","Epoch 90/150\n","469/469 [==============================] - 3s 6ms/step - loss: 0.2432 - accuracy: 0.9119\n","Epoch 91/150\n","469/469 [==============================] - 3s 6ms/step - loss: 0.2420 - accuracy: 0.9124\n","Epoch 92/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2409 - accuracy: 0.9128\n","Epoch 93/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2399 - accuracy: 0.9133\n","Epoch 94/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2387 - accuracy: 0.9137\n","Epoch 95/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2377 - accuracy: 0.9140\n","Epoch 96/150\n","469/469 [==============================] - 3s 7ms/step - loss: 0.2366 - accuracy: 0.9145\n","Epoch 97/150\n","469/469 [==============================] - 4s 8ms/step - loss: 0.2355 - accuracy: 0.9153\n","Epoch 98/150\n","469/469 [==============================] - 4s 8ms/step - loss: 0.2344 - accuracy: 0.9156\n","Epoch 99/150\n","469/469 [==============================] - 3s 7ms/step - loss: 0.2334 - accuracy: 0.9159\n","Epoch 100/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2324 - accuracy: 0.9162\n","Epoch 101/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2312 - accuracy: 0.9164\n","Epoch 102/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2302 - accuracy: 0.9169\n","Epoch 103/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2292 - accuracy: 0.9172\n","Epoch 104/150\n","469/469 [==============================] - 3s 5ms/step - loss: 0.2282 - accuracy: 0.9174\n","Epoch 105/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2272 - accuracy: 0.9179\n","Epoch 106/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2262 - accuracy: 0.9182\n","Epoch 107/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2252 - accuracy: 0.9183\n","Epoch 108/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2243 - accuracy: 0.9185\n","Epoch 109/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2232 - accuracy: 0.9189\n","Epoch 110/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2223 - accuracy: 0.9192\n","Epoch 111/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2213 - accuracy: 0.9198\n","Epoch 112/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2204 - accuracy: 0.9202\n","Epoch 113/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2195 - accuracy: 0.9207\n","Epoch 114/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2185 - accuracy: 0.9211\n","Epoch 115/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2175 - accuracy: 0.9215\n","Epoch 116/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2166 - accuracy: 0.9217\n","Epoch 117/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2157 - accuracy: 0.9220\n","Epoch 118/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2149 - accuracy: 0.9223\n","Epoch 119/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2140 - accuracy: 0.9224\n","Epoch 120/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2130 - accuracy: 0.9229\n","Epoch 121/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2122 - accuracy: 0.9235\n","Epoch 122/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2113 - accuracy: 0.9238\n","Epoch 123/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2105 - accuracy: 0.9241\n","Epoch 124/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2095 - accuracy: 0.9248\n","Epoch 125/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2087 - accuracy: 0.9250\n","Epoch 126/150\n","469/469 [==============================] - 3s 5ms/step - loss: 0.2078 - accuracy: 0.9253\n","Epoch 127/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2070 - accuracy: 0.9257\n","Epoch 128/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2061 - accuracy: 0.9260\n","Epoch 129/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2052 - accuracy: 0.9262\n","Epoch 130/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2045 - accuracy: 0.9265\n","Epoch 131/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2036 - accuracy: 0.9269\n","Epoch 132/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2028 - accuracy: 0.9270\n","Epoch 133/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2020 - accuracy: 0.9271\n","Epoch 134/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2012 - accuracy: 0.9276\n","Epoch 135/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.2003 - accuracy: 0.9277\n","Epoch 136/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1995 - accuracy: 0.9283\n","Epoch 137/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1988 - accuracy: 0.9284\n","Epoch 138/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1979 - accuracy: 0.9287\n","Epoch 139/150\n","469/469 [==============================] - 3s 5ms/step - loss: 0.1971 - accuracy: 0.9291\n","Epoch 140/150\n","469/469 [==============================] - 3s 6ms/step - loss: 0.1962 - accuracy: 0.9295\n","Epoch 141/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1956 - accuracy: 0.9296\n","Epoch 142/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1947 - accuracy: 0.9300\n","Epoch 143/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1940 - accuracy: 0.9302\n","Epoch 144/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1932 - accuracy: 0.9307\n","Epoch 145/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1924 - accuracy: 0.9310\n","Epoch 146/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1917 - accuracy: 0.9312\n","Epoch 147/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1909 - accuracy: 0.9316\n","Epoch 148/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1901 - accuracy: 0.9318\n","Epoch 149/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1894 - accuracy: 0.9319\n","Epoch 150/150\n","469/469 [==============================] - 2s 5ms/step - loss: 0.1886 - accuracy: 0.9323\n"]}]},{"cell_type":"code","metadata":{"id":"9kaJs9S6_pmA","outputId":"ef03ae81-7638-4607-a3b1-7d3c80a94ffb","colab":{"base_uri":"https://localhost:8080/","height":966},"executionInfo":{"status":"ok","timestamp":1649414558518,"user_tz":240,"elapsed":446,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["plt.figure(1, figsize=(10,8))\n","plt.plot(trHistory.history['accuracy'], 'b-o')\n","#plt.plot(trHistory.history['loss'])\n","plt.grid(True)\n","# plt.xlabel('Epoch #')\n","plt.ylabel(\"Accuracy\")\n","\n","plt.figure(2, figsize=(10,8))\n","plt.plot(trHistory.history['loss'],'r-s')\n","plt.grid(True)\n","plt.xlabel('Epoch #')\n","plt.ylabel(\"Loss\")\n","plt.show()"],"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"biwE7uJ9Au-U","outputId":"2fa816d8-50f9-4698-f413-90d649dd2e5c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649414558915,"user_tz":240,"elapsed":398,"user":{"displayName":"Yiqiao Yin","userId":"16271867367914268422"}}},"source":["tPrediction = model.predict(tImages) # output is a matrix of probabilities where each row corresponds to an image in the Test Set\n","idCount = 0\n","nErrs = 0\n","for _ in tPrediction:\n","  predictedLabel = np.argmax(_)\n","  if predictedLabel != tLabels[idCount]:\n","     nErrs += 1\n","  idCount += 1\n","\n","errRate = nErrs / float(np.shape(tImages)[0])\n","print(\"Prediction Error = %f\" %errRate)"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Prediction Error = 0.117200\n"]}]},{"cell_type":"markdown","metadata":{"id":"nX2cfDkfVtxK"},"source":["##Summary\n","\n","In a Single-Layer implementation, we apply logistic regression directly on pixels of input images. With this network, we achieve classification error of ~$19\\%$. In a Multi-Layer implementation, we apply two ReLu layers on pixels of input images prior to applying logistic regression. With this network, we achieve classification error of ~$12\\%$.\n","\n","Single-layer implementation uses a $784$ weight-matrix while Multi-Layer implementation uses a $784 \\times 128 \\times 32 \\times 10 $ weight-matrix, i.e., a total of $> 32$ million weights. With a factor of $40000$ more weights, we achieve an improvement of $6%$ in classification error rate."]}]}